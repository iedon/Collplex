// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: NodeData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Collplex.Models.Node {

  /// <summary>Holder for reflection information generated from NodeData.proto</summary>
  public static partial class NodeDataReflection {

    #region Descriptor
    /// <summary>File descriptor for NodeData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NodeDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5Ob2RlRGF0YS5wcm90bxIUQ29sbHBsZXguTW9kZWxzLk5vZGUiwwEKCE5v",
            "ZGVEYXRhEjwKCHNlcnZpY2VzGAEgAygLMiouQ29sbHBsZXguTW9kZWxzLk5v",
            "ZGUuTm9kZURhdGEuTm9kZVNlcnZpY2UaeQoLTm9kZVNlcnZpY2USCwoDa2V5",
            "GAEgASgJEgwKBG5hbWUYAiABKAkSDwoHbm9kZVVybBgDIAEoCRIPCgdwcml2",
            "YXRlGAQgASgIEhQKDHJlZ1RpbWVzdGFtcBgFIAEoAxIXCg9leHBpcmVUaW1l",
            "c3RhbXAYBiABKANiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Collplex.Models.Node.NodeData), global::Collplex.Models.Node.NodeData.Parser, new[]{ "Services" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Collplex.Models.Node.NodeData.Types.NodeService), global::Collplex.Models.Node.NodeData.Types.NodeService.Parser, new[]{ "Key", "Name", "NodeUrl", "Private", "RegTimestamp", "ExpireTimestamp" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class NodeData : pb::IMessage<NodeData> {
    private static readonly pb::MessageParser<NodeData> _parser = new pb::MessageParser<NodeData>(() => new NodeData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Collplex.Models.Node.NodeDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeData(NodeData other) : this() {
      services_ = other.services_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeData Clone() {
      return new NodeData(this);
    }

    /// <summary>Field number for the "services" field.</summary>
    public const int ServicesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Collplex.Models.Node.NodeData.Types.NodeService> _repeated_services_codec
        = pb::FieldCodec.ForMessage(10, global::Collplex.Models.Node.NodeData.Types.NodeService.Parser);
    private readonly pbc::RepeatedField<global::Collplex.Models.Node.NodeData.Types.NodeService> services_ = new pbc::RepeatedField<global::Collplex.Models.Node.NodeData.Types.NodeService>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Collplex.Models.Node.NodeData.Types.NodeService> Services {
      get { return services_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!services_.Equals(other.services_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= services_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      services_.WriteTo(output, _repeated_services_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += services_.CalculateSize(_repeated_services_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeData other) {
      if (other == null) {
        return;
      }
      services_.Add(other.services_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            services_.AddEntriesFrom(input, _repeated_services_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the NodeData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// 子节点业务元素 
      /// </summary>
      public sealed partial class NodeService : pb::IMessage<NodeService> {
        private static readonly pb::MessageParser<NodeService> _parser = new pb::MessageParser<NodeService>(() => new NodeService());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<NodeService> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Collplex.Models.Node.NodeData.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NodeService() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NodeService(NodeService other) : this() {
          key_ = other.key_;
          name_ = other.name_;
          nodeUrl_ = other.nodeUrl_;
          private_ = other.private_;
          regTimestamp_ = other.regTimestamp_;
          expireTimestamp_ = other.expireTimestamp_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NodeService Clone() {
          return new NodeService(this);
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 1;
        private string key_ = "";
        /// <summary>
        /// 子节点业务标识 Key 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Key {
          get { return key_; }
          set {
            key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private string name_ = "";
        /// <summary>
        /// 子节点友好名称 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "nodeUrl" field.</summary>
        public const int NodeUrlFieldNumber = 3;
        private string nodeUrl_ = "";
        /// <summary>
        /// 子节点所对应的该业务的完整URL 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string NodeUrl {
          get { return nodeUrl_; }
          set {
            nodeUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "private" field.</summary>
        public const int PrivateFieldNumber = 4;
        private bool private_;
        /// <summary>
        /// 子节点的服务是是否只对同主体的其他子节点开放，如果为 False，则子节点的业务外网可达 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Private {
          get { return private_; }
          set {
            private_ = value;
          }
        }

        /// <summary>Field number for the "regTimestamp" field.</summary>
        public const int RegTimestampFieldNumber = 5;
        private long regTimestamp_;
        /// <summary>
        /// UNIX 时间戳 首次注册的时间 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long RegTimestamp {
          get { return regTimestamp_; }
          set {
            regTimestamp_ = value;
          }
        }

        /// <summary>Field number for the "expireTimestamp" field.</summary>
        public const int ExpireTimestampFieldNumber = 6;
        private long expireTimestamp_;
        /// <summary>
        /// UNIX 时间戳 过期时间。如果子节点超过规定的时间(regInterval)没有报告自己存活，即此业务暂时不能使用。 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ExpireTimestamp {
          get { return expireTimestamp_; }
          set {
            expireTimestamp_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as NodeService);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(NodeService other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Key != other.Key) return false;
          if (Name != other.Name) return false;
          if (NodeUrl != other.NodeUrl) return false;
          if (Private != other.Private) return false;
          if (RegTimestamp != other.RegTimestamp) return false;
          if (ExpireTimestamp != other.ExpireTimestamp) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Key.Length != 0) hash ^= Key.GetHashCode();
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (NodeUrl.Length != 0) hash ^= NodeUrl.GetHashCode();
          if (Private != false) hash ^= Private.GetHashCode();
          if (RegTimestamp != 0L) hash ^= RegTimestamp.GetHashCode();
          if (ExpireTimestamp != 0L) hash ^= ExpireTimestamp.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Key.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Key);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          if (NodeUrl.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(NodeUrl);
          }
          if (Private != false) {
            output.WriteRawTag(32);
            output.WriteBool(Private);
          }
          if (RegTimestamp != 0L) {
            output.WriteRawTag(40);
            output.WriteInt64(RegTimestamp);
          }
          if (ExpireTimestamp != 0L) {
            output.WriteRawTag(48);
            output.WriteInt64(ExpireTimestamp);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Key.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
          }
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (NodeUrl.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeUrl);
          }
          if (Private != false) {
            size += 1 + 1;
          }
          if (RegTimestamp != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(RegTimestamp);
          }
          if (ExpireTimestamp != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpireTimestamp);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(NodeService other) {
          if (other == null) {
            return;
          }
          if (other.Key.Length != 0) {
            Key = other.Key;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.NodeUrl.Length != 0) {
            NodeUrl = other.NodeUrl;
          }
          if (other.Private != false) {
            Private = other.Private;
          }
          if (other.RegTimestamp != 0L) {
            RegTimestamp = other.RegTimestamp;
          }
          if (other.ExpireTimestamp != 0L) {
            ExpireTimestamp = other.ExpireTimestamp;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Key = input.ReadString();
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
              case 26: {
                NodeUrl = input.ReadString();
                break;
              }
              case 32: {
                Private = input.ReadBool();
                break;
              }
              case 40: {
                RegTimestamp = input.ReadInt64();
                break;
              }
              case 48: {
                ExpireTimestamp = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
