// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ClientContext.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Collplex.Models {

  /// <summary>Holder for reflection information generated from ClientContext.proto</summary>
  public static partial class ClientContextReflection {

    #region Descriptor
    /// <summary>File descriptor for ClientContext.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClientContextReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNDbGllbnRDb250ZXh0LnByb3RvEg9Db2xscGxleC5Nb2RlbHMiygEKDUNs",
            "aWVudENvbnRleHQSNgoHY2xpZW50cxgBIAMoCzIlLkNvbGxwbGV4Lk1vZGVs",
            "cy5DbGllbnRDb250ZXh0LkNsaWVudBqAAQoGQ2xpZW50EhAKCGNsaWVudElk",
            "GAEgASgJEhQKDGNsaWVudFNlY3JldBgCIAEoCRIMCgRuYW1lGAMgASgJEhMK",
            "C21heFNlcnZpY2VzGAQgASgFEhoKEnJlZ0ludGVydmFsU2Vjb25kcxgFIAEo",
            "BRIPCgd0aW1lb3V0GAYgASgFYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Collplex.Models.ClientContext), global::Collplex.Models.ClientContext.Parser, new[]{ "Clients" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Collplex.Models.ClientContext.Types.Client), global::Collplex.Models.ClientContext.Types.Client.Parser, new[]{ "ClientId", "ClientSecret", "Name", "MaxServices", "RegIntervalSeconds", "Timeout" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ClientContext : pb::IMessage<ClientContext> {
    private static readonly pb::MessageParser<ClientContext> _parser = new pb::MessageParser<ClientContext>(() => new ClientContext());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Collplex.Models.ClientContextReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientContext(ClientContext other) : this() {
      clients_ = other.clients_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientContext Clone() {
      return new ClientContext(this);
    }

    /// <summary>Field number for the "clients" field.</summary>
    public const int ClientsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Collplex.Models.ClientContext.Types.Client> _repeated_clients_codec
        = pb::FieldCodec.ForMessage(10, global::Collplex.Models.ClientContext.Types.Client.Parser);
    private readonly pbc::RepeatedField<global::Collplex.Models.ClientContext.Types.Client> clients_ = new pbc::RepeatedField<global::Collplex.Models.ClientContext.Types.Client>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Collplex.Models.ClientContext.Types.Client> Clients {
      get { return clients_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!clients_.Equals(other.clients_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= clients_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      clients_.WriteTo(output, _repeated_clients_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += clients_.CalculateSize(_repeated_clients_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientContext other) {
      if (other == null) {
        return;
      }
      clients_.Add(other.clients_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            clients_.AddEntriesFrom(input, _repeated_clients_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ClientContext message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// 客户 
      /// </summary>
      public sealed partial class Client : pb::IMessage<Client> {
        private static readonly pb::MessageParser<Client> _parser = new pb::MessageParser<Client>(() => new Client());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Client> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Collplex.Models.ClientContext.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Client() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Client(Client other) : this() {
          clientId_ = other.clientId_;
          clientSecret_ = other.clientSecret_;
          name_ = other.name_;
          maxServices_ = other.maxServices_;
          regIntervalSeconds_ = other.regIntervalSeconds_;
          timeout_ = other.timeout_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Client Clone() {
          return new Client(this);
        }

        /// <summary>Field number for the "clientId" field.</summary>
        public const int ClientIdFieldNumber = 1;
        private string clientId_ = "";
        /// <summary>
        /// 客户ID 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ClientId {
          get { return clientId_; }
          set {
            clientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "clientSecret" field.</summary>
        public const int ClientSecretFieldNumber = 2;
        private string clientSecret_ = "";
        /// <summary>
        /// 客户密钥，用于数据加解密 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ClientSecret {
          get { return clientSecret_; }
          set {
            clientSecret_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 3;
        private string name_ = "";
        /// <summary>
        /// 客户名称 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "maxServices" field.</summary>
        public const int MaxServicesFieldNumber = 4;
        private int maxServices_;
        /// <summary>
        /// 客户子节点总共最多可以注册多少业务 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MaxServices {
          get { return maxServices_; }
          set {
            maxServices_ = value;
          }
        }

        /// <summary>Field number for the "regIntervalSeconds" field.</summary>
        public const int RegIntervalSecondsFieldNumber = 5;
        private int regIntervalSeconds_;
        /// <summary>
        /// 客户子节点注册周期，单位秒，客户子节点必须在这个时间以内至少重复注册一次以报告存活，否则本中心节点会认为子节点业务宕机 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int RegIntervalSeconds {
          get { return regIntervalSeconds_; }
          set {
            regIntervalSeconds_ = value;
          }
        }

        /// <summary>Field number for the "timeout" field.</summary>
        public const int TimeoutFieldNumber = 6;
        private int timeout_;
        /// <summary>
        /// 允许中心节点请求子节点业务时的最大等待时间 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Timeout {
          get { return timeout_; }
          set {
            timeout_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Client);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Client other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ClientId != other.ClientId) return false;
          if (ClientSecret != other.ClientSecret) return false;
          if (Name != other.Name) return false;
          if (MaxServices != other.MaxServices) return false;
          if (RegIntervalSeconds != other.RegIntervalSeconds) return false;
          if (Timeout != other.Timeout) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ClientId.Length != 0) hash ^= ClientId.GetHashCode();
          if (ClientSecret.Length != 0) hash ^= ClientSecret.GetHashCode();
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (MaxServices != 0) hash ^= MaxServices.GetHashCode();
          if (RegIntervalSeconds != 0) hash ^= RegIntervalSeconds.GetHashCode();
          if (Timeout != 0) hash ^= Timeout.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ClientId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(ClientId);
          }
          if (ClientSecret.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ClientSecret);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Name);
          }
          if (MaxServices != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(MaxServices);
          }
          if (RegIntervalSeconds != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(RegIntervalSeconds);
          }
          if (Timeout != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(Timeout);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ClientId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientId);
          }
          if (ClientSecret.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientSecret);
          }
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (MaxServices != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxServices);
          }
          if (RegIntervalSeconds != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(RegIntervalSeconds);
          }
          if (Timeout != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timeout);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Client other) {
          if (other == null) {
            return;
          }
          if (other.ClientId.Length != 0) {
            ClientId = other.ClientId;
          }
          if (other.ClientSecret.Length != 0) {
            ClientSecret = other.ClientSecret;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.MaxServices != 0) {
            MaxServices = other.MaxServices;
          }
          if (other.RegIntervalSeconds != 0) {
            RegIntervalSeconds = other.RegIntervalSeconds;
          }
          if (other.Timeout != 0) {
            Timeout = other.Timeout;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                ClientId = input.ReadString();
                break;
              }
              case 18: {
                ClientSecret = input.ReadString();
                break;
              }
              case 26: {
                Name = input.ReadString();
                break;
              }
              case 32: {
                MaxServices = input.ReadInt32();
                break;
              }
              case 40: {
                RegIntervalSeconds = input.ReadInt32();
                break;
              }
              case 48: {
                Timeout = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
