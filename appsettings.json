{
  /* 日志配置 */
  "Logging": {
    "LogLevel": {
      "Default": "Warning"
    }
  },

  /* 允许主机头 */
  "AllowedHosts": "*",

  /*
      允许被以下IP地址反向代理，不支持填写域名
      如果不配置，则未填写的反向代理传递过来的 X-Forwarded-For, X-Forwarded-Proto 将不会起作用
      支持多个IP，使用数组表示。
      如果服务器是双栈网络，则 IPv4 地址应该用 IPv6 格式表示。比如 ::ffff:10.0.0.1
  */
  "AllowedProxyIPs": [ "172.23.91.2", "172.23.91.17", "127.0.0.1" ],

  /* 解析反向代理 X-Forwarded-For 几层源地址，默认为 1，注意防止用户伪造源 IP */
  "XForwardedForLimit": 1,

  /* 子节点请求反重放时间戳验证允许的正负误差范围。单位秒，默认十分钟（600） */
  "NodePacketInboundAntiReplaySeconds": 600,

  /* 是否记录子节点请求，默认 false */
  "LogUserRequest": false,

  /* LogUserRequest 为 false 时，此项无效。是否记录子节点请求过来的数据体(Body)，如果为是，则用户访问日志中将记录用户的请求数据体，默认 false */
  "LogUserPayload": true,

  /* 请求子节点业务时所使用的 HttpClient 的生命周期，单位秒 */
  "NodeHttpClientLifeTimeSeconds": 300,

  /* 业务默认权重(当注册业务的时候不带 weight 显式指定权重时使用的默认值) */
  "NodeDefaultWeight": 1,

  /* 指定会话上下文 GC 执行时间间隔，单位秒，指定 0 禁用会话状态回收，默认 3600 (一小时)  */
  "SessionContextGCIntervalSeconds": 30,

  /* 是否定期将会话上下文信息写到 Redis 中便于统计(库中 statistics 后缀名)，单位秒，指定 0 禁用写入功能，默认 0  */
  "WriteSessionContextToRedisIntervalSeconds": 5,

  /* 数据库设置 */
  "DbSettings": {

    /* 子节点业务发现数据库(Redis) 即业务注册中心数据库 */
    "Redis": {

      /* Redis 专用配置字符串。localhost:6379,password=xxx,defaultDatabase=0 (默认数据库索引)
       * 项目使用 StackExchange，配置字符串的文档：
       * https://stackexchange.github.io/StackExchange.Redis/Configuration
       */
      "ConfigurationString": "localhost:6379,password=,defaultDatabase=0",

      /* 本项目所使用的 Redis 键的前缀 */
      "KeyPrefix": "Collplex_",

      /* 业务注册中心获取写入锁的最大允许等待时间
       *已上锁的情况下，在此时间内线程将多次尝试获取锁。如果达到此时间未获得锁，则操作直接返回失败。
       * 单位秒。不建议设大，但也不能过小。默认值 5
       */
      "AcquireLockTimeoutSeconds": 5,

      /* 业务注册中心写入锁的自动过期时间，用于防止死锁。单位秒。不建议过大，但也不能过小，默认值 10 */
      "LockTimeoutSeconds": 10
    },

    "MongoDB": {
      /* 
       * 用于配置日志数据服务。用户必须有任意数据库的读写权限。
       * MongoDB 配置字符串。如："mongodb://username:password@host:port/?ssl=true"
       */
      "ConfigurationString": "mongodb://admin:Gujiawen0!@127.0.0.1:27017"
    }
  },

  /* 对内置的 Kestrel HTTP 的设置 */
  "Kestrel": {
    "EndPoints": {
      "Http": {
        /* 设置 HTTP 监听地址，例如: http://0.0.0.0:80 */
        "Url": "http://0.0.0.0:8099"
      }
    }
  }

}
